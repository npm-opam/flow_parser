class.js:18
 18:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }
                                                ^^^^^^ null. This type is incompatible with
 19:   set propWithSubtypingGetterAndSetter(x: number) { }
                                               ^^^^^^ number

class.js:18
 18:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }
                                                ^^^^^^ undefined. This type is incompatible with
 19:   set propWithSubtypingGetterAndSetter(x: number) { }
                                               ^^^^^^ number

class.js:23
 23:   get propWithSubtypingGetterAndSetterReordered(): ?number { return 4; }
                                                         ^^^^^^ null. This type is incompatible with
 22:   set propWithSubtypingGetterAndSetterReordered(x: number) { }
                                                        ^^^^^^ number

class.js:23
 23:   get propWithSubtypingGetterAndSetterReordered(): ?number { return 4; }
                                                         ^^^^^^ undefined. This type is incompatible with
 22:   set propWithSubtypingGetterAndSetterReordered(x: number) { }
                                                        ^^^^^^ number

class.js:25
 25:   get propWithMismatchingGetterAndSetter(): number { return 4; }
                                                 ^^^^^^ number. This type is incompatible with
 26:   set propWithMismatchingGetterAndSetter(x: string) { } // Error doesn't match getter
                                                 ^^^^^^ string

class.js:26
 26:   set propWithMismatchingGetterAndSetter(x: string) { } // Error doesn't match getter
                                                 ^^^^^^ string. This type is incompatible with
 25:   get propWithMismatchingGetterAndSetter(): number { return 4; }
                                                 ^^^^^^ number

class.js:41
 41: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 41: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

class.js:42
 42: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 42: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

class.js:49
 49: foo.goodSetterNoAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `goodSetterNoAnnotation`
 11:   set goodSetterNoAnnotation(x) { z = x; }
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

class.js:50
 50: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `goodSetterWithAnnotation`
 50: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 12:   set goodSetterWithAnnotation(x: number) { z = x; }
                                       ^^^^^^ number

class.js:52
 52: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 52: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

class.js:52
 52: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 52: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

class.js:54
 54: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
 54: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                      ^^^^^^ number

class.js:55
 55: foo.propOverriddenWithSetter = 123; // Error number ~> string
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment of property `propOverriddenWithSetter`
 55: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ number. This type is incompatible with
 32:   set propOverriddenWithSetter(x: string) { }
                                       ^^^^^^ string

object.js:15
 15:   set goodSetterNoAnnotation(x) { z = x; },
                                           ^ string. This type is incompatible with
  5: var z: number = 123;
            ^^^^^^ number

object.js:22
 22:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }, // Error
                                                ^^^^^^ null. This type is incompatible with
 23:   set propWithSubtypingGetterAndSetter(x: number) { },
                                               ^^^^^^ number

object.js:22
 22:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }, // Error
                                                ^^^^^^ undefined. This type is incompatible with
 23:   set propWithSubtypingGetterAndSetter(x: number) { },
                                               ^^^^^^ number

object.js:26
 26:   get propWithSubtypingGetterAndSetterReordered(): ?number { return 4; },
                                                         ^^^^^^ null. This type is incompatible with
 25:   set propWithSubtypingGetterAndSetterReordered(x: number) { }, // Error
                                                        ^^^^^^ number

object.js:26
 26:   get propWithSubtypingGetterAndSetterReordered(): ?number { return 4; },
                                                         ^^^^^^ undefined. This type is incompatible with
 25:   set propWithSubtypingGetterAndSetterReordered(x: number) { }, // Error
                                                        ^^^^^^ number

object.js:28
 28:   get exampleOfOrderOfGetterAndSetter(): A { return new A(); },
                                              ^ A. This type is incompatible with
 29:   set exampleOfOrderOfGetterAndSetter(x: B) {},
                                              ^ B

object.js:32
 32:   get exampleOfOrderOfGetterAndSetterReordered(): A { return new A(); },
                                                       ^ A. This type is incompatible with
 31:   set exampleOfOrderOfGetterAndSetterReordered(x: B) {},
                                                       ^ B

object.js:41
 41: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 41: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                               ^^^^^^ string

object.js:42
 42: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number. This type is incompatible with
 42: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                               ^^^^^^ string

object.js:49
 49: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ string. This type is incompatible with
 16:   set goodSetterWithAnnotation(x: number) { z = x; },
                                       ^^^^^^ number

object.js:51
 51: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null. This type is incompatible with
 51: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

object.js:51
 51: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ undefined. This type is incompatible with
 51: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                       ^^^^^^ number

object.js:60
 60:   obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B. This type is incompatible with
 59: var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                       ^^^^^^ number

react.js:7
  7:     get a() { return 4; },
         ^^^^^^^^^^^^^^^^^^^^^ get/set properties not supported for React propTypes

react.js:8
  8:     set b(x: number) { this.c = x; },
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ get/set properties not supported for React propTypes


Found 29 errors
